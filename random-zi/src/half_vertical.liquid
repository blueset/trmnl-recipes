<div class="layout zi-main-container zi-main-container-vertical" style="--zitou-size: 96px; align-items: safe center;" lang="zh">
  <div class="gap--xsmall grid grid--cols-1 h-full" style="align-items: safe center; align-content: center;">
    <div class="top left flex flex--around flex--row gap--space-between col--span-1 fz-12">
      <div class="zitou"></div>
      <div class="top-right grow flex flex--col gap--xsmall">
        <div class="ids"></div>
        <div class="flex layout--justify-center yin-grid yin-grid-landscape"></div>
      </div>
    </div>
    <div class="right flex flex--col gap--xsmall col--span-1 h--max-full fz-24">
      <div class="hidden glyphs"></div>
      <div class="yi"></div>
    </div>
  </div>
</div>

<div class="title_bar" lang="zh">
  <svg class="image-stroke" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 400 400"><g><g><polygon points="186.087,48.371 173.533,60.924 102.011,236.038 219.954,73.478 236.399,60.332"/><rect x="64.67" y="60.924" width="108.862" height="11.584"/><polyline points="102.011,236.038 103.312,237.339 219.954,73.478"/><path d="M62.589,287.324l13.738,46.211l8.742-5.464l-1.337-7.826c0,0,78.824-22.304,148.138-65.313L62.589,287.324z"/><path d="M335.858,73.301h0.003c-6.612-20.534-53.558-35.149-53.558-35.149l-2.498,2.312c0,0,22.874,16.429,24.222,38.28 c-0.005,0.169-0.014,0.338-0.014,0.508c0,0.5,0.028,0.995,0.079,1.484c0,0.004,0,0.009,0,0.014l0,0 c0.806,7.858,7.874,14.004,16.478,14.004c9.142,0,16.555-6.94,16.555-15.502C337.125,77.144,336.673,75.134,335.858,73.301z"/><polygon points="297.123,134.175 297.123,338.323 334.023,323.309 334.023,151.504 341.934,144.011 334.023,139.276"/></g></g></svg>
  <span class="title">{{ trmnl.plugin_settings.instance_name }}</span>
  <span class="instance">Description</span>
</div>

<style>
  .top.left {
    justify-content : space-between; /* Override .top style */
  }
  .top-right {
    height: var(--zitou-size, 96px);
    align-self: safe center;
    justify-content : safe center; /* Not in Framework v2 */
  }
  @container zi-main-container (width > 0px) {
    .right {
      max-height: round(down, calc(100cqb - var(--zitou-size)), var(--line-height));
    }
  }
</style>

<script>

  (() => {
    const root = document.currentScript.closest(".view");
    root.querySelector(".title_bar .title").innerText = `${result.codepoint} (${result.block})`;
    root.querySelector(".title_bar .instance").innerText = `${result.properties.join(' ')}` || {{ trmnl.plugin_settings.instance_name | json }};

    root.querySelector(".left .zitou").innerHTML = `${result.mainZi}`;
    root.querySelector(".left .ids").innerHTML = `${result.ids}`;

    const yinGrid = root.querySelector(".left .yin-grid");
    for (const yinRow of result.yin) {
      const div = document.createElement("div");
      div.className = "yin-row w-auto";
      const nameSpan = document.createElement("span");
      nameSpan.className = "yin-name";
      nameSpan.innerText = yinRow.name;
      div.appendChild(nameSpan);
      const yinsSpan = document.createElement("span");
      yinsSpan.className = "yins flex";
      for (const yinData of yinRow.yins) {
        if (!yinRow.yins.every(a => a.level === "C" && a.ji) && yinData.level === "C" && yinData.ji) continue;
        const yinSpan = document.createElement("span");
        yinSpan.className = "yin inline-block";
        if (yinData.level) {
          yinSpan.classList.add(`level-${yinData.level}`);
          if (yinData.level === "C") {
            yinSpan.classList.add(`2bit:text--gray-55`);
          }
        }
        yinSpan.innerText = yinData.yin;
        if (yinData.path || yinData.ji) {
          const jiSpan = document.createElement("span");
          jiSpan.className = "yin-ji";
          jiSpan.innerHTML = `(${replaceFont(parseMeaning(yinData.path || yinData.ji), { size: textFontSize })})`;
          yinSpan.appendChild(jiSpan);
        }
        yinsSpan.appendChild(yinSpan);
      }
      div.appendChild(yinsSpan);
      yinGrid.appendChild(div);
    }

    const glyphsDiv = root.querySelector(".right .glyphs");
    for (const glyphData of result.glyphs) {
      const div = document.createElement("div");
      div.className = "glyph-group flex";
      const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      svg.setAttribute("viewBox", "-2 -20 25 25");
      svg.style.margin = "3px 0 -8px"; // Negative margin is not in Framework v2
      const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
      path.setAttribute("d", glyphData.glyph);
      path.setAttribute("fill", "currentColor");
      svg.appendChild(path);
      div.appendChild(svg);
      const sourceSpan = document.createElement("span");
      sourceSpan.className = "glyph-source label label--small";
      sourceSpan.innerText = glyphData.source;
      div.appendChild(sourceSpan);
      glyphsDiv.appendChild(div);
    }

    const yiDiv = root.querySelector(".right .yi");
    function renderYiNode(node, container) {
      if (node.circular) {
        return;
      }
      const div = document.createElement("div");
      div.className = "yi-node flex";
      
      if (node.redirect?.join("")) {
        const redirectSpan = document.createElement("span");
        redirectSpan.className = "yi-redirect inline label label--inverted";
        redirectSpan.innerHTML = node.redirect.join(" ");
        container.appendChild(redirectSpan);
      }
      
      const indexDiv = document.createElement("div");
      indexDiv.className = "yi-index";
      indexDiv.innerHTML = `(${node.index})`;
      div.appendChild(indexDiv);

      const meaningsDiv = document.createElement("div");
      meaningsDiv.className = "yi-meanings";
      const meaningDiv = document.createElement("div");
      meaningDiv.className = "yi-meaning";
      if (node.cnMeaning) {
        const cnSpan = document.createElement("span");
        cnSpan.className = "yi-cn";
        cnSpan.innerHTML = node.cnMeaning;
        meaningDiv.appendChild(cnSpan);
      }
      if (node.enMeaning) {
        const enSpan = document.createElement("span");
        enSpan.className = "yi-en py--0 px--1 mr--1 inline label label--outline";
        enSpan.innerHTML = node.enMeaning;
        meaningDiv.appendChild(enSpan);
      }
      if (node.meaning13) {
        const enSpan = document.createElement("span");
        enSpan.className = "yi-13 py--0 px--1 mr--1 inline label label--outline";
        enSpan.innerHTML = node.meaning13;
        meaningDiv.appendChild(enSpan);
      }
      div.appendChild(meaningDiv);

      container.appendChild(div);
      for (const child of node.children ?? []) {
        renderYiNode(child, meaningDiv);
      }
    }
    for (const yiNode of result.yi) {
      renderYiNode(yiNode, yiDiv);
    }


const resizeObserver = new ResizeObserver(entries => {
  for (const entry of [root.querySelector(".left"), root.querySelector(".right")]) {
    
    const height = entry.scrollHeight;
    const containerHeight = 
      entry.closest('.zi-main-container').getBoundingClientRect().height -
      (root.querySelector('.yin-grid-landscape')?.getBoundingClientRect()?.height ?? 16) -
      parseInt(getComputedStyle(root.querySelector(".right")).rowGap);
    console.log('height', height, containerHeight);

    if (height > containerHeight) {
      if (entry.classList.contains("fz-24")) {
        entry.classList.remove("fz-24");
        entry.classList.add("fz-16");
        console.log('change class', entry, entry.classList);
      } else if (entry.classList.contains("fz-16")) {
        entry.classList.remove("fz-16");
        entry.classList.add("fz-12");
        console.log('change class', entry, entry.classList);
      }
    }
  }
});

resizeObserver.observe(root.querySelector(".left"));
resizeObserver.observe(root.querySelector(".right"));
resizeObserver.observe(root.querySelector(".right .yi"));

  
  })();
</script>